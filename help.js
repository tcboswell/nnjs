/*Copyright (C) <2017>  <Terry Boswell>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.*/
    
    HELPcontent["RNN"] = ["RecurrentNeuralNetwork", "Recurrent Neural Network With Long Short-Term Memory", "c = new RNN(params)<br> c.train(X)<br> c.predict(x,y)", "The first function creates a new recurrent neural network and the second trains it on a data array X containing a series of numerical, boolean or string objects. The target value for each object is the succeeding object in this series. <br>The train function's possible parameters are:<br>hidden: number of hidden neurons (default 50),<br>epochs: maximum number of epochs (default 10000),<br>stopcriterion: an error threshhold for halting training (default 0.0),<br>learningrate: value between 0 and 1 (default 0.01),<br>initialweightsvalue: bound for uniform initial weights (default 0.01),<br>inneractivator: squashing function within LSTM memory (default \"sigmoid\"),<br>outeractivator: sqaushing function outside LSTM memory (default \"tanh\"),<br>LSTM: flag to include memory cell structure (default: true), the parameter false results in a more primitive network requiring less memory and time resources,<br>windowsize: maximum number of objects for backpropagation in time (default 10, minimum of 3, at each pass through the data a random choice within the inclusive maximum and minimum size bounds is made in order to avoid possible artefacts due to repetitive backprogagation through the same data subsets),<br>windowsizevariable: a flag to turn the variability of window size off or on (default: off), <br>breakobject: an arbitrary object of suitable type which divides the data sequence into subsequences so that the hidden states and memory states are reinitialized whenever this object is encountered (default: undefined) <br>Running reports about the progress of training are accessible in a browser's developer console.<br>The predict function takes two arguments: an initial array of objects from the data set and the number of objects which are to be predicted in sequence when given that initial array.", "//The file named \"data\" contains a sequence of digits consisting of, for n from 1 to 32 randomly: n 1s, one 0, n 2s, one 0, n 3s, one 4.\n//During training the network begins to learn the simple context-sensitive grammar a\u207Fdb\u207Fdc\u207F. The sequences of 1s, 2s, and 3s, are analogous to words, the 0 is analogous to a space between words, and the 4 is like the period at the end of a statement.\n//Having been trained on such sequences with n being thirty-two or less, when given thirty-three 1s and one 0 it should have learned to generalize and be able to predict thirty-three 2s, then one 0, then thirty-three 3s.\nX = loaddata(\"data\")\nparams = {hidden: 32, windowsize: 99, breakobject: 4, epochs: 1000}\nc = new RNN(params)\nc.train(X)\nsequencelength = 68\ninitialobjects = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]\nprediction = c.predict(initialobjects, sequencelength)\nprint(prediction)"];
